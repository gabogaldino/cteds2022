// <auto-generated />
using GamesAPI.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamesAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220919165108_create_database")]
    partial class create_database
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GamesAPI.Domains.Studio", b =>
                {
                    b.Property<int>("IdStudio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStudio"), 1L, 1);

                    b.Property<string>("StudioName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.HasKey("IdStudio");

                    b.ToTable("Studios");

                    b.HasData(
                        new
                        {
                            IdStudio = 1,
                            StudioName = "Blizzard"
                        },
                        new
                        {
                            IdStudio = 2,
                            StudioName = "Rockstar Studios"
                        },
                        new
                        {
                            IdStudio = 3,
                            StudioName = "Square Enix"
                        });
                });

            modelBuilder.Entity("GamesAPI.Domains.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<int>("IdUserType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VARCHAR(30)");

                    b.HasKey("IdUser");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("IdUserType");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Email = "admin@admin.com",
                            IdUserType = 1,
                            Password = "admin"
                        },
                        new
                        {
                            IdUser = 2,
                            Email = "cliente@cliente.com",
                            IdUserType = 2,
                            Password = "cliente"
                        });
                });

            modelBuilder.Entity("GamesAPI.Domains.UserType", b =>
                {
                    b.Property<int>("IdUserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserType"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("IdUserType");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            IdUserType = 1,
                            Title = "Administrador"
                        },
                        new
                        {
                            IdUserType = 2,
                            Title = "Cliente"
                        });
                });

            modelBuilder.Entity("GamesAPI.Domains.User", b =>
                {
                    b.HasOne("GamesAPI.Domains.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("IdUserType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserType");
                });
#pragma warning restore 612, 618
        }
    }
}
